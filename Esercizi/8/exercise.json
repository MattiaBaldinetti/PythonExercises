{
    "id": 8, 
    "description": "Prende in input un insieme di parole, torna la lista ordinata di tutte le parole che Ã¨ possibile creare fondendo le parole nell'insieme di partenza", 
    "text": "    \n    Es 3: 3 punti\n    due parole possono fondersi se la prima ha un suffisso di almeno due caratteri \n    che coincide col prefisso di pari lunghezza della seconda. \n    Il risultato della fusione e' la parola che si ottiene concatenando la prima parola \n    con la seconda grazie alla parte comune.\n    Ad esempio:  \n    - le due parole 'candela' ed 'elastico' possono fondersi grazie al suffisso \n      'ela' di  3 caratteri, il risultato della fusione e' la parola  'candelastico' \n    _ le parole 'Angelo' e 'gelo' possono fondersi grazie al suffisso 'gelo', la parola \n     risultante e''Angelo'. \n    _ le parole 'aaaaa' e 'aaab' possono fondersi in diversi, modi: \n       _ grazie al suffisso 'aa' si ottiene la fusione 'aaaaaab' \n       _ grazie al suffisso 'aaa' si ottiene la fusione 'aaaaab'.\n     Si definisca la  funzione es2(insieme) che, dato un insieme di parole, restituisce \n     la lista con tutte le possibili fusioni. \n     La lista deve risultare ordinata lessicograficamente e vanno eliminati eventuali \n     duplicati.\n     \n    ESEMPIO: \n    se  insieme={  'aaaa', 'acde', 'aacd', 'aaaade'} la funzione restituira' la lista: \n    ['aaaaaade', 'aaaaade', 'aaaacd', 'aaaade', 'aacde'] \n    grazie alle seguenti fusioni:\n    'aaaa'  'aaaade' ---> 'aaaaaade' con suffisso 'aa'\n    'aaaa'  'aaaade' ---> 'aaaaade'  con suffisso 'aaa'\n    'aaaa'  'aaaade' ---> 'aaaade'   con suffisso 'aaaa'\n    'aaaa'  'aacd'   ---> 'aaaacd'   con suffisso 'aa'\n    'aacd'  'acde'   ---> 'aacde'    con suffisso 'acd'\n    ", 
    "algorithm": "Inizializzo un alista vuota\nper ogni parola p nell'insieme\n\tper ogni parola p2 dell'insieme(tranne p)\n\t\tcontrollo se dalle ultime 2 lettere fino all'inizio di p, p coincide con l'inizio di p2\n\t\t\tse si: creo la nuova parola e l'aggiungo alla lista\n\t\t\taltrimenti continuo\ntolgo i doppioni dalla lista e la ordino\ntorno la lista", 
    "tags": ["Ordinamento", "Stringhe"], 
    "effort": 3,
    "clues": [],
    "from":"esame-8-1-19"
}