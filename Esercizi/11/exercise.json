{
    "id": 11, 
    "description": "Dato un file di testo contenente stringhe, ritorna un dizionario con chiave una stringa senza vocali e attributo una lista di stringhe, che hanno generato la chiave", 
    "text": "\n    Es 11: 3 punti\nprogettare la funzione es11(ftesto) che, preso in input \nl'indirizzo di un file di testo restituisce un dizionario avente per chiavi delle stringhe \ned attributo liste di  stringhe.\nIl file di testo contiene stringhe distinte di caratteri, si guardi \nad esempio il file f9.txt. \nLe chiavi del dizionario si ottengono dalle stringhe presenti nel file dopo aver \neliminato da queste le vocali ed aver riordinato lessicograficamente i caratteri rimanenti \n(ad esempio dalla stringa 'angelo' si ottine la chiave 'gln').\nAttributo della chiave e' la lista contenente le stringhe del file che l'hanno generata. \nNota che  stringhe diverse possono generare una stessa chiave come nel caso \ndi  'casa', 'caso' e 'cose'\nLe stringhe nella lista devono comparire  ordinate per lunghezza decrescente, a parita' \ndi lunghezza, lessicograficamente.\n\nAd Esempio, per il file di testo f10.txt  la funzione restituisce  il dizionario:\n{'prt': ['parto', 'porta'], \n'r': ['era', 'ora'], \n'pr': ['arpia', 'arpa'], \n'cs': ['casa', 'cosa'], \n'fll': ['follia', 'fallo', 'folla'], \n'rt': ['otre', 'tre'], \n'lp': ['piolo', 'polo']\n}\n", 
    "algorithm": "Leggo il file e creo una lista di parole, a cui sono stati eliminati eventuali spazi bianchi iniziali e finali\ninizializzo un duzionario vuoto\nper ogni parola\n\ttolgo le vocali\n\tordino le consonanti\n\taggiorno il dizionario\nper ogni chiave del dizionario\n\tordino la lista di stringhe\nritorno il dizionario", 
    "tags": ["File", "Ordinamento", "Stringhe", "Dizionari"], 
    "effort": 3,
    "clues": [],
    "from":"esame-8-1-19"
}